/**
 * Frontend.java
 * Authors: Jacob Egestad and Cade Marks
 * Course: CSC 460 - Database Design
 * Instructor: Dr. McCann
 * TAs: Haris Riaz and Aayush Pinto
 * Assignment: Program #4: Database Design and Implementation
 * Due: May 2, 2022
 * Description: This file represents the frontend of Program 4. It produces a basic text interface
 *              which allows the user to make requests that are then translated to SQL statements
 *              executed on the Database by Backend.java using JDBC. User requests are accepted by
 *              first displaying a menu of options for inserting, deleting, updating records, and
 *              making five different preset SQL queries to retrieve information from the DB. Some
 *              of these SQL queries take input from the user, such as a specific date.
 * Operational Requirements: Java 16
 * Missing Features and Bugs: N/A
 */

package frontend;

import java.util.Scanner;

public class Frontend {
    public static void main(String[] args) {
        //Backend.init();
        promptUser();
    }

    /**
     * promptUser: Prints a text menu that prompts the user to select the insert, delete, update,
     *             or query function by entering the corresponding number, or -1 to terminate the
     *             program.
     *
     * @return void
     * Pre-conditions: N/A
     * Post-conditions: scanner is closed
     */
    private static void promptUser() {
        System.out.println("1. Insert record\n2. Delete record\n3. Update record\n4. Query database\n-1:EXIT");
        Scanner scanner = new Scanner(System.in); // user's selection from text menu
        System.out.println("Choose an option from the menu: ");
        int option = Integer.parseInt(scanner.nextLine()); // user's selection from text menu
        while (option != -1) {
            switch (option) {
                case 1:
                    insert(scanner);
                case 2:
                    delete(scanner);
                case 3:
                    update(scanner);
                case 4:
                    query(scanner);
                default:
                    System.out.println("1. Insert record\n2. Delete record\n3. Update record\n4. Query database\n-1:EXIT");
                    System.out.println("Choose an option from the menu: ");
                    option = Integer.parseInt(scanner.nextLine());
            }
        }
        scanner.close();
    }

    /**
     * insert: Allows user to add a record to the Patient, Employee, or Appointment table. The
     *         user will be asked to provide values for each attribute in the record, and prompted
     *         again if those attributes are not of the correct type. At any point, the user can
     *         return to the previous menu. The id of the record is generated by the back-end.
     *
     * @param scanner The user input scanner
     * @return void
     * Pre-conditions: scanner is an open Scanner object
     * Post-conditions: N/A
     */
    private static void insert(Scanner scanner) {
        System.out.println("Insert a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
        int option = Integer.parseInt(scanner.nextLine()); // user's selection from text menu
        while (option != 4) {
            switch (option) {
                case 1:
                    String fname;
                    while(true) {
                        System.out.print("Enter the patient's first name: ");
                        fname = scanner.nextLine();
                        if (fname.length() > 30) {
                            System.out.println("\nPatient's first name must be 30 characters or less");
                        } else {
                            break;
                        }
                    }
                    String lname;
                    while(true) {
                        System.out.print("Enter the patient's last name: ");
                        lname = scanner.nextLine();
                        if (fname.length() > 30) {
                            System.out.println("\nPatient's last name must be 30 characters or less");
                        } else {
                            break;
                        }
                    }
                    String bursar;
                    while(true) {
                        System.out.print("Enter the patient's bursar account number: ");
                        bursar = scanner.nextLine();
                        if (fname.length() > 30) {
                            System.out.println("\nPatient's first name must be 30 characters or less");
                        } else {
                            break;
                        }
                    }

                case 2:

                case 3:

                case 4:
                    break;
                default:
                    System.out.println("Insert a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
                    System.out.println("Choose an option from the menu: ");
                    option = Integer.parseInt(scanner.nextLine());
            }
        }
    }

    /**
     * delete: Allows user to delete a record to the Patient, Employee, or Appointment table. The
     *         user then enters the id of the record they wish to delete. If the id does not match
     *         a record in the table, the user is notified and asked to reenter the id. At any
     *         point, the user can return to the previous menu.
     *
     * @param scanner The user input scanner
     * @return void
     * Pre-conditions: scanner is an open Scanner object
     * Post-conditions: N/A
     */
    private static void delete(Scanner scanner) {
        System.out.println("Delete a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
        int option = Integer.parseInt(scanner.nextLine()); // user's selection from text menu
        int id; // id of table entry (either PatientID, EmployeeID, AppointmentNo)
        while (option != 4) {
            switch (option) {
                case 1:
                    System.out.println("Enter a patient id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 2:
                    System.out.println("Enter an employee id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 3:
                    System.out.println("Enter an appointment id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 4:
                    break;
                default:
                    System.out.println("Delete a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
                    System.out.println("Choose an option from the menu: ");
                    option = Integer.parseInt(scanner.nextLine());
            }
        }
    }

    /**
     * update: Allows user to update a record to the Patient, Employee, or Appointment table. The
     *         user then enters the id of the record they wish to update. If the id does not match
     *         a record in the table, the user is notified and asked to reenter the id. Then the
     *         user is prompted for the attribute they wish to change in that record. If the user-
     *         input attribute name does not match one in the table, they are notified and asked
     *         again for the attribute name. At any point, the user can return to the previous
     *         menu.
     *
     * @param scanner The user input scanner
     * @return void
     * Pre-conditions: scanner is an open Scanner object
     * Post-conditions: N/A
     */
    private static void update(Scanner scanner) {
        System.out.println("Update a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
        int option = Integer.parseInt(scanner.nextLine()); // user's selection from text menu
        int id; // id of table entry (either PatientID, EmployeeID, AppointmentNo)
        String attribute; // attribute user wishes to update
        while (option != 4) {
            switch (option) {
                case 1:
                    System.out.println("Enter a patient id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 2:
                    System.out.println("Enter an employee id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 3:
                    System.out.println("Enter an appointment id: ");
                    id = Integer.parseInt(scanner.nextLine());
                case 4:
                    break;
                default:
                    System.out.println("Update a(n)...\n  1. Patient\n  2. Employee\n  3. Appointment\n 4. Return to options menu");
                    System.out.println("Choose an option from the menu: ");
                    option = Integer.parseInt(scanner.nextLine());
            }
        }
    }

    /**
     * query: The user is prompted to choose a query from the generated text menu. Some of these
     *        queries will prompt the user for information to specify the nature of the query. At
     *        any point, the user can return to the previous menu.
     *
     * @param scanner The user input scanner
     * @return void
     * Pre-conditions: scanner is an open Scanner object
     * Post-conditions: N/A
     */
    private static void query(Scanner scanner) {
        System.out.println("\nPlease choose a query:\n  1. Print a list of patients who have their 2nd, 3rd or 4th dos"+
                        "es of the COVID-19 vaccine scheduled by a certain date.\n  2. Given a certain date, output wh"+
                        "ich patients had a non-walk-in appointment. Sort in order by appointment time and group by ty"+
                        "pe of service.\n  3. Print the schedule of staff given a certain date . A schedule contains t"+
                        "he list of staff members working that day and a staff member's working hours.\n  4. Print the"+
                        " vaccine statistics of the two categories of patients (student, employees). \n  5. A query of your choice\n  6. Return to options menu");
        int option = Integer.parseInt(scanner.nextLine()); // user's selection from text menu
        while (option != 6) {
            String date; // the date to be input by the user
            switch (option) {
                case 1:
                    System.out.println("Please enter a date: ");
                    date = scanner.nextLine();
                case 2:
                    System.out.println("Please enter a date: ");
                    date = scanner.nextLine();
                case 3:
                    System.out.println("Please enter a date: ");
                    date = scanner.nextLine();
                case 4:

                case 5:

                case 6:
                    break;
                default:
                    System.out.println("\nPlease choose a query:\n  1. Print a list of patients who have their 2nd, 3rd or 4th doses of the COVID-19 vaccine scheduled by a certain date.\n" +
                            "  2. Given a certain date, output which patients had a non-walk-in appointment. Sort in order by appointment time and group by type of service.\n" +
                            "  3. Print the schedule of staff given a certain date . A schedule contains the list of staff members working that day and a staff member's working hours.\n" +
                            "  4. Print the vaccine statistics of the two categories of patients (student, employees). \n" +
                            "  5. A query of your choice\n  6. Return to options menu");
                    System.out.println("Choose an option from the menu: ");
                    option = Integer.parseInt(scanner.nextLine());
            }
        }
    }


}
